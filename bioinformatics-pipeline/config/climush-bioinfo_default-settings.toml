# This is the default configuration file for the CliMush bioinformatics pipeline.

title = 'CliMush Bioinformatics Pipeline DEFAULT Configuration'



[globus_info]
climush_endpoint = 'ba6d86af-0b0d-46b7-a56a-bb4ebadec1b9'  # string: the Globus endpoint ID of the CliMush Sequences
                                                           #    group collection

[run_details]
run_name = 'climush-'  # string: date that pipeline ran will follow the hyphen, climush-YYMMDD


[automate]
run_all =       false  # true/false: when set to 'true', the entire pipeline will run from start to finish automatically
run_some =      []     # integer(s): list of integers corresponding to the steps of the pipeline to run, e.g., [1,2,3]
save_all =      true   # true/false: when set to 'true', will save all logs from the pipeline run; otherwise saves none
exit_on_error = true   # true/false: when set to 'true', automated pipeline will stop if error/warning shown
auto_respond =  true   # true/false: if automated, set to 'true' to respond 'yes' to prompts; otherwise, respond 'no'


[demultiplex]
multiplex.7803 = 'pacbio_soil-litter_2023-10'  # 4-digit UO sequencing core needed to find multiplexed files
multiplex.6971 = 'pacbio_sporocarp-f_2023-03'  # 4-digit UO sequencing core needed to find multiplexed files
multiplex.7668 = 'pacbio_sporocarp-f_2023-11'  # 4-digit UO sequencing core needed to find multiplexed files
multiplex.7806 = 'pacbio_sporocarp-f_2023-12'  # 4-digit UO sequencing core needed to find multiplexed files
multiplex.7983 = 'pacbio_sporocarp-f_2024-01'  # 4-digit UO sequencing core needed to find multiplexed files
multiplex.8007 = 'pacbio_sporocarp-f_2024-03'  # 4-digit UO sequencing core needed to find multiplexed files
multiplex.TBD =  'pacbio_sporocarp-f_2024-04'  # UPDATE ONCE SEQUENCES ARE RETURNED

min_precision =  { 'fwd' = 93, 'rev' = 93 }   # integer: barcode precision minimum score (93 = 93%);
                                              #          93 recommended by Tedersoo et al. 2021

[primers]
fwd.sequence.pacbio =   'ACCWGCGGARGGATCATTA'       # sequence of the pacbio forward primer
fwd.sequence.illumina = 'CTTGGTCATTTAGAGGAAGTAA'    # sequence of the illumina forward primer
fwd.sequence.sanger =   ''                          # sequence of the sanger forward primer
fwd.name = { pacbio = 'ITS1catta', illumina = 'ITS1F', sanger = '' }  # key-value pairs of fwd primer names

rev.sequence.pacbio =   'TCCTGAGGGAAACTTCG'         # sequence of the pacbio reverse primer
rev.sequence.illumina = 'GCTGCGTTCTTCATCGATGC'      # sequence of the illumina reverse primer
rev.sequence.sanger =   ''                          # sequence of the sanger reverse primer
rev.name = { pacbio = 'LR5', illumina = 'ITS2', sanger = '' }  # key-value pairs of rev primer names


[remove_primers]
max_error_rate =   { 'fwd' = 0.2, 'rev' = 0.2 }    # float: maximum error rate used by cutadapt for fwd and rev primer match
linked_adapters =  true                            # true/false: if true, primers are linked (e.g., read must have fwd + rev)
require_adapters = { 'fwd' = true, 'rev' = true }  # true/false: if true, fwd/rev primer is required in order to trim
keep_untrimmed =   true                            # true/false: save untrimmed reads to an untrimmed folder
max_untrimmed =    10                              # integer: the maximum allowed percentage of total reads to remain
                                                   #          untrimmed (10 = 10% of total input reads not trimmed)


[quality_filtering]
pacbio.qscore =  40      # 20/30/40: quality score folder to use in pipeline
pacbio.min_len = 100     # integer: minimum sequence length (bp) of post-primer removal reads
pacbio.max_len = 8000    # integer: maximum sequence length (bp) of post-primer removal reads

illumina.merge_reads = true  # true/false: if true, all forward and reverse reads will be merged
illumina.max_error =   2     # float: maximum expected error
illumina.min_len =     0     # integer: minimum sequence length (bp) of post-primer removal reads
illumina.max_len =     600   # integer: maximum sequence length (bp) of post-primer removal reads


[dereplicate]
pacbio.min_count.derep01 = 1    # integer: minimum number of identical full-length reads (or %); must be at least 1
pacbio.min_count.derep02 = 5    # integer: minimum number of identical reads after derep of subregion reads (or %)

illumina.min_count.derep01 = 1  # integer: minimum number of identical full-length reads (or %)
illumina.min_count.derep02 = 1  # integer: minimum number of identical reads after derep of subregion reads (or %)


[separate_subregions]
fungi_only =    true   # optional: if true, compares only to fungi reference sequences; if false, searches all (time-consuming)
which_regions = 'all'  # optional: region or subregion to output; options are SSU, ITS1, 5.8S, ITS2, LSU, all (default), none


[chimera_check]
method =        'denovo'  # 'reference'/'denovo': whether to use uchime denovo or reference-based using UNITE's chim ref dataset
keep_chimeras = true      # true/false: keep reads that are chimeras, separated into a directory of chimeras


[otu_clustering]
min_threshold = 95              # integer: minimum percent identity to cluster reads into OTUs
method =        'average'       # 'average': method used to align reads prior to clustering
group_by =      'community'     # 'community'/'sample: what pool of reads to consider when clustering
choose_rep_by = 'read count'    # 'read count'/'read_size': how to chose the representative read for each OTU
choose_top_by = 'read count'    # 'read count'/'read_size': how to chose the top OTU per sample;
                                #           only relevant for sporocarp samples